h1. Cohorts

Cohorts is a simple, purely javascript, multivariate testing framework.

It allows you to easily run split tests for visitors on your site, showing them different designs, layouts, or whatever you want. Cohorts also allows you to track interesting events that occur for each of the cohorts. There are examples to use it with Google Analytics and SnowPlow Analytics, but you can easily customize it to store data in any analytics platform.

Note that Cohorts will not do any analysis for you: it's up to you to carefully analyze the data gathered to make business decisions.

Since the framework is purely javascript based, it's especially useful if you're working in an environment that has page and fragment caching.

h2. Basic Usage

1. Setup the asynchronous version of Google Analytics using the instructions on this page: "http://code.google.com/apis/analytics/docs/tracking/asyncTracking.html":http://code.google.com/apis/analytics/docs/tracking/asyncTracking.html

2. Include cohorts.js in the head of your page.

3. Instantiate and configure the @Cohorts.Test@ object.

For example, say you want to run a test to determine whether a bigger header link results in more clicks. In your page, you have both big and small header links, and they are not displayed by default. You can setup 2 cohorts like this:

<pre><code>
// Note that this example assumes jQuery
$(document).ready(function () {

    Cohorts.Options.debug = true;
    font_test = new Cohorts.Test({
        name: 'hello-goodbye',
        scope: 1, // Set the scope for the test and custom variable: 1: Visitor, 2: Session, 3: Page 
        sample: 1,
        cohorts: {
            hello: {
                onChosen: function () {
                    $('p.message').html('Hello, world.');
                }
            },
            goodbye: {
                onChosen: function () {
                    $('p.message').html('Goodbye, world.');
                }
            },
        },

        storageAdapter: {
            nameSpace: 'cohorts',
            cv_slot: 1, // Choose which custom variable slot you'd like to use
            trackEvent: function (category, action, opt_label, opt_value, int_hit, cv_slot, scope) {
                if (cv_slot) _gaq.push(['_setCustomVar', cv_slot, action, opt_label, scope]); // Set custom variable before event
                _gaq.push(['_trackEvent', category, action, opt_label, opt_value, int_hit]);
            },
            onInitialize: function (inTest, testName, cohort, cv_slot, scope) {
                if (inTest && scope !== 3) {
                    this.trackEvent(this.nameSpace, testName, cohort, 0, true, cv_slot, scope); // No need for cookies at page-level scope
                }
            },
            onEvent: function (testName, cohort, eventName) {
                this.trackEvent(this.nameSpace, testName, cohort + ' | ' + eventName, 0, false);
            }
        }

    });

    $('p.message').click(function () {
        hello - goodbye.event('Clicked on message'); // Track any evens with your storage adapter
    });

    // Add more test objects as you please

});
</code></pre>

After running this on your site, you will see new data in the Event Tracking section of Google Analytics.

There will be a new category called "cohorts", and under that your tests will show up as "actions". In this case "big_vs_small_header" will be an action.

Under each test action, you will see various labels. For this example, you will see the following labels:

* "hello" - The total number of people seeing "hello"
* "hello | Clicked on message" - The total number of people in the big cohort that converted
* "goodbye" - The total number of people seeing "goodbye"
* "goodbye | Clicked on message" - The total number of people in the small cohort that converted

From this data, you can determine the effects the design change.

h2. API

h3. Constructor

To initiate the test, create an instance of @Cohorts.Test@, which accepts an options hash with the following keys:

* @name@ The name of the test. This needs to be unique.
* @scope@ Whether you want the test to persist at the level of a 1: Visitor, 2: Session, 3: Page (integer 1-3, 1 is recommended)
* @sample@ A float from 0 to 1.0 representing the percentage of visitors that should be in the test. For example, if you specify 0.5, only 50% of visitors will be considered to be testable. This is useful if you want to restrict testing to a small percentage of visitors.
* @cohorts@ Hash with keys of the names of the cohorts. For the values, you can specify a @onChosen@ function that should be executed as soon as the visitor resolves to that cohort.
* @storageAdapter@ An object representing the data store you want to use. More details below. If you don't specify anything, it will defaults to using Google Analytics event tracking.

h3. Instance Methods

@inCohort(cohort_name)@ Whether the visitor is in the specified cohort.
@getCohort()@ Returns the cohort chosen for the visitor.
@setCohort(cohort_name)@ Sets the cohort for the visitor.

h2. Don't want to use Google Analytics? No problem.

Google Analytics event tracking is a great way to store data. They provide a great abstraction so you don't have to worry about making a scalable data store for your tests.

If you want to use another data store, simply specify an object for the @storageAdapter@ parameter to the @Cohorts.Test@ constructor that looks like the following:

<pre><code>
    storageAdapter: {
        nameSpace: 'cohorts',
    	cv_slot: 1, // Choose which custom variable slot you'd like to use
        trackEvent: function(category, action, opt_label, opt_value, int_hit, cv_slot, scope) { 	
			if (cv_slot) _gaq.push(['_setCustomVar', cv_slot, action, opt_label, scope]); // Set custom variable before event
			_gaq.push(['_trackEvent', category, action, opt_label, opt_value, int_hit]);
        },
        onInitialize: function(inTest, testName, cohort, cv_slot, scope) {
            if(inTest && scope !== 3) {
                this.trackEvent(this.nameSpace, testName, cohort, 0, true, cv_slot, scope); // No need for cookies at page-level scope
            }
        },
        onEvent: function(testName, cohort, eventName) {
            this.trackEvent(this.nameSpace, testName, cohort + ' | ' + eventName, 0, false);
        }
    }
</code></pre>

By specifying the above, you can easily hook up Cohorts to use your own data store. For example, you could make AJAX calls within @onInitialize@ and @onEvent@ to your web analytics service.

h2. Forcing Cohorts

It's useful when testing to force yourself into a particular cohort. You can specify a cohort via URL encoded params in a hash, like so:

<pre><code>
http://www.example.com/page.html#hello-goodbye=hello&test2=cohort
</code></pre>

This would force @test1@ to be in @cohort_foo@ and @test2@ to be in @cohort_bar@. 

h2. Details and Notes

Cohorts uses javascript and cookies to track visitors and the various details about them. For all visitors that are chosen to be in the test, based on @sample@, it evenly divides visitors among the different cohorts specified.

Once a visitor is chosen to be in/out of the test, and also in a cohort, they will be chosen the same way as long as their cookies persist.

You can have multiple tests running on a page, as long as your test names are unique.

h2. TODO

* More examples
